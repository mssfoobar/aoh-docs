"use strict";(self.webpackChunkaoh_documentation=self.webpackChunkaoh_documentation||[]).push([[8102],{78201:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var t=n(74848),s=n(28453);const o={sidebar_position:40},r="Signing Commits",a={id:"development/source_management/verified-commits",title:"Signing Commits",description:"To sign commits that are valid under GitHub's rules - you must use a GPG Keypair. Signing commits allows us to verify",source:"@site/docs/20_development/50_source_management/40-verified-commits.md",sourceDirName:"20_development/50_source_management",slug:"/development/source_management/verified-commits",permalink:"/aoh-docs/docs/development/source_management/verified-commits",draft:!1,unlisted:!1,editUrl:"https://github.com/mssfoobar/aoh-docs/tree/main/docs/20_development/50_source_management/40-verified-commits.md",tags:[],version:"current",sidebarPosition:40,frontMatter:{sidebar_position:40},sidebar:"development",previous:{title:"Publishing Web Components",permalink:"/aoh-docs/docs/development/source_management/publishing"},next:{title:"\ud83c\udf10 DevOps (onboarding new service)",permalink:"/aoh-docs/docs/category/-devops-onboarding-new-service"}},c={},l=[{value:"1. Generate a GPG Keypair",id:"1-generate-a-gpg-keypair",level:2},{value:"2. Set up the GPG public key",id:"2-set-up-the-gpg-public-key",level:2},{value:"2.1. List your existing GPG keys",id:"21-list-your-existing-gpg-keys",level:3},{value:"2.2. Print the GPG public key",id:"22-print-the-gpg-public-key",level:3},{value:"2.3. Add the GPG public key to GitHub",id:"23-add-the-gpg-public-key-to-github",level:3},{value:"3. Set up the GPG private key",id:"3-set-up-the-gpg-private-key",level:2},{value:"List your existing GPG keys",id:"list-your-existing-gpg-keys",level:2},{value:"Migrate GPG Keypairs",id:"migrate-gpg-keypairs",level:2},{value:"Delete GPG Keypairs",id:"delete-gpg-keypairs",level:2},{value:"Password Entry on Mac",id:"password-entry-on-mac",level:2}];function d(e){const i={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h1,{id:"signing-commits",children:"Signing Commits"}),"\n",(0,t.jsx)(i.p,{children:"To sign commits that are valid under GitHub's rules - you must use a GPG Keypair. Signing commits allows us to verify\nthat commits are made by the user that's committing them."}),"\n",(0,t.jsxs)(i.p,{children:["Ideally, all branches should be protected to require commits to be signed. This can be done by ",(0,t.jsx)(i.a,{href:"https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/about-protected-branches#require-signed-commits",children:"configuring GitHub's\nbranch protection rules"})," to ensure commits are only allowed when they have been verified with a\nGPG signature. The following section explains how you can set your computer up with a GPG keypair to sign your git\ncommits."]}),"\n",(0,t.jsx)(i.h2,{id:"1-generate-a-gpg-keypair",children:"1. Generate a GPG Keypair"}),"\n",(0,t.jsx)(i.p,{children:"To generate a new GPG key on the machine:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"gpg --full-generate-key\n"})}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"1"})," for ",(0,t.jsx)(i.code,{children:"(1) RSA and RSA (default)"})," when prompted on what kind of key you want."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"4096"})," when prompted on what keysize you want."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"0"})," when prompted how long the key should be valid so that it does not expire (unless you wish to commit to a\ndifferent policy)."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"y"})," to confirm that the key does not expire if you picked ",(0,t.jsx)(i.code,{children:"0"}),"."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"<your name>"})," when asked for your name. This does not need to match the commit name."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"<email address>"})," when asked for your email, this must match the commit email address."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"<comment>"})," (optional) some comments to tag onto this key."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"O"})," for (O)kay when you're done."]}),"\n",(0,t.jsxs)(i.li,{children:["A dialogue box will appear - key in your passphrase for the key - you ",(0,t.jsx)("b",{children:"MUST"})," remember this passphrase and use it\nevery time to sign a commit. You will be asked to key the passphrase in again to confirm."]}),"\n"]}),"\n",(0,t.jsx)(i.admonition,{type:"tip",children:(0,t.jsxs)(i.p,{children:["See this ",(0,t.jsx)(i.a,{href:"https://docs.github.com/en/authentication/managing-commit-signature-verification/generating-a-new-gpg-key",children:"reference"})," for more information."]})}),"\n",(0,t.jsx)(i.h2,{id:"2-set-up-the-gpg-public-key",children:"2. Set up the GPG public key"}),"\n",(0,t.jsx)(i.h3,{id:"21-list-your-existing-gpg-keys",children:"2.1. List your existing GPG keys"}),"\n",(0,t.jsx)(i.p,{children:"To list existing GPG keys on the machine:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"gpg --list-keys --keyid-format=long\ngpg --list-secret-keys --keyid-format=long\n"})}),"\n",(0,t.jsxs)(i.p,{children:["GPG key ID is located after ",(0,t.jsx)(i.code,{children:"sec rsa4096/"})]}),"\n",(0,t.jsx)(i.admonition,{type:"tip",children:(0,t.jsxs)(i.p,{children:["See this ",(0,t.jsx)(i.a,{href:"https://docs.github.com/en/authentication/managing-commit-signature-verification/checking-for-existing-gpg-keys",children:"reference"})," for more information."]})}),"\n",(0,t.jsx)(i.h3,{id:"22-print-the-gpg-public-key",children:"2.2. Print the GPG public key"}),"\n",(0,t.jsx)(i.p,{children:"Print the GPG public key in ASCII armor format:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"gpg --armor --export <key-ID>\n"})}),"\n",(0,t.jsx)(i.admonition,{type:"tip",children:(0,t.jsxs)(i.p,{children:["See this ",(0,t.jsx)(i.a,{href:"https://docs.github.com/en/authentication/managing-commit-signature-verification/generating-a-new-gpg-key",children:"reference"})," for more information."]})}),"\n",(0,t.jsx)(i.h3,{id:"23-add-the-gpg-public-key-to-github",children:"2.3. Add the GPG public key to GitHub"}),"\n",(0,t.jsxs)(i.p,{children:["Copy the entire output from ",(0,t.jsx)(i.a,{href:"#21-list-your-existing-gpg-keys",children:"2.1"})," into your ",(0,t.jsx)(i.a,{href:"https://github.com/settings/keys",children:"GitHub account's settings > keys"})]}),"\n",(0,t.jsxs)(i.p,{children:["Select ",(0,t.jsx)(i.code,{children:"New GPG key"})," and paste the output there."]}),"\n",(0,t.jsxs)(i.p,{children:["Also, it is highly recommended that you set your account to ",(0,t.jsx)(i.code,{children:"Vigilant mode"})," to mark any unsigned commits as ",(0,t.jsx)(i.code,{children:"unverified"}),"."]}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.img,{alt:"image",src:n(83661).A+"",width:"1137",height:"737"})}),"\n",(0,t.jsx)(i.admonition,{type:"tip",children:(0,t.jsxs)(i.p,{children:["See this ",(0,t.jsx)(i.a,{href:"https://docs.github.com/en/authentication/managing-commit-signature-verification/adding-a-gpg-key-to-your-github-account",children:"reference"})," for more information."]})}),"\n",(0,t.jsx)(i.h2,{id:"3-set-up-the-gpg-private-key",children:"3. Set up the GPG private key"}),"\n",(0,t.jsxs)(i.p,{children:["Edit the ",(0,t.jsx)(i.code,{children:".gitconfig"})," for global configuration. On Windows machines, it should be at ",(0,t.jsx)(i.code,{children:"%USERPROFILE%/.gitconfig"}),".",(0,t.jsx)(i.br,{}),"\n","Or edit the ",(0,t.jsx)(i.code,{children:".git/config"})," for each repository's configuration."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"[user]\n    email = <commit email>\n    signingkey = <key-ID>\n[commit]\n    gpgsign = true\n"})}),"\n",(0,t.jsx)(i.p,{children:"Alternatively, you can use the following commands to edit your git config from the terminal."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:' git config user.email "<commit email>"\n git config user.signingkey "<key-ID>"\n git config commit.gpgsign true\n'})}),"\n",(0,t.jsxs)(i.p,{children:["You can add the ",(0,t.jsx)(i.code,{children:"--global"})," flag to modify the settings globally (for any/all repositories in your machine).",(0,t.jsx)(i.br,{}),"\n","Repository settings will supersede global settings."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:' git config --global user.email "<commit email>"\n git config --global user.signingkey "<key-ID>"\n git config --global commit.gpgsign true\n'})}),"\n",(0,t.jsx)(i.p,{children:"After that, you will be prompted for a passphrase every time you commit."}),"\n",(0,t.jsx)(i.admonition,{type:"tip",children:(0,t.jsxs)(i.p,{children:["See this ",(0,t.jsx)(i.a,{href:"https://docs.github.com/en/authentication/managing-commit-signature-verification/telling-git-about-your-signing-key#telling-git-about-your-gpg-key",children:"reference"})," for more information."]})}),"\n",(0,t.jsx)(i.h2,{id:"list-your-existing-gpg-keys",children:"List your existing GPG keys"}),"\n",(0,t.jsx)(i.p,{children:"To list existing GPG keys on the machine:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"gpg --list-keys --keyid-format=long\ngpg --list-secret-keys --keyid-format=long\n"})}),"\n",(0,t.jsxs)(i.p,{children:["GPG key ID is located after ",(0,t.jsx)(i.code,{children:"sec rsa4096/"})]}),"\n",(0,t.jsx)(i.p,{children:"This will be useful, especially when you need to view the key ID (used in many of the commands)."}),"\n",(0,t.jsx)(i.admonition,{type:"tip",children:(0,t.jsxs)(i.p,{children:["See this ",(0,t.jsx)(i.a,{href:"https://docs.github.com/en/authentication/managing-commit-signature-verification/checking-for-existing-gpg-keys",children:"reference"})," for more information."]})}),"\n",(0,t.jsx)(i.h2,{id:"migrate-gpg-keypairs",children:"Migrate GPG Keypairs"}),"\n",(0,t.jsx)(i.p,{children:"To export the keypairs from your PC:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"gpg --export <key-ID> > public_keys.pgp\ngpg --export-secret-keys <key-ID> > private_keys.pgp\n"})}),"\n",(0,t.jsx)(i.p,{children:"To import the keypairs to your other PC:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:"gpg --import < public_keys.pgp\ngpg --import < private_keys.pgp\n"})}),"\n",(0,t.jsx)(i.admonition,{type:"tip",children:(0,t.jsxs)(i.p,{children:["See this ",(0,t.jsx)(i.a,{href:"https://makandracards.com/makandra-orga/37763-gpg-extract-private-key-and-import-on-different-machine",children:"reference"})," for more information."]})}),"\n",(0,t.jsx)(i.h2,{id:"delete-gpg-keypairs",children:"Delete GPG Keypairs"}),"\n",(0,t.jsx)(i.p,{children:"To delete the keypairs from your PC:"}),"\n",(0,t.jsx)(i.admonition,{type:"info",children:(0,t.jsx)(i.p,{children:"You must delete the private key before you can delete the public key."})}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:"gpg --delete-secret-key <key-ID>\ngpg --delete-key <key-ID>\n"})}),"\n",(0,t.jsxs)(i.p,{children:["Or delete the ",(0,t.jsx)(i.code,{children:".gnupg"})," file. On Windows machines, it should be at ",(0,t.jsx)(i.code,{children:"%USERPROFILE%/.gnupg"}),"."]}),"\n",(0,t.jsx)(i.admonition,{type:"tip",children:(0,t.jsxs)(i.p,{children:["See this ",(0,t.jsx)(i.a,{href:"https://blog.chapagain.com.np/gpg-remove-keys-from-your-public-keyring/",children:"reference"})," for more information."]})}),"\n",(0,t.jsx)(i.h2,{id:"password-entry-on-mac",children:"Password Entry on Mac"}),"\n",(0,t.jsxs)(i.p,{children:["If you're on MacOS, under the default configuration, ",(0,t.jsx)(i.code,{children:"gpg"})," might not be able to create a password prompt for you. Run the following commands\nin sequence to install ",(0,t.jsx)(i.code,{children:"pinetry-mac"}),", which is a small collection of dialog programs that allow GnuPG to read passphrases and PIN numbers\nin a secure manner."]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",children:'brew install pinentry-mac\necho "pinentry-program $(which pinentry-mac)" >> ~/.gnupg/gpg-agent.conf\nkillall gpg-agent\n'})})]})}function h(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},83661:(e,i,n)=>{n.d(i,{A:()=>t});const t=n.p+"assets/images/github_settings_keys-826b038bece825f7fe45905d65a8b0b3.png"},28453:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>a});var t=n(96540);const s={},o=t.createContext(s);function r(e){const i=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(o.Provider,{value:i},e.children)}}}]);