"use strict";(self.webpackChunkaoh_documentation=self.webpackChunkaoh_documentation||[]).push([[2791],{73048:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(74848),i=n(28453);const o={sidebar_position:2},a="\ud83d\udcbb Development",s={id:"modules/wfe/guides/Workflow Worker/development",title:"\ud83d\udcbb Development",description:"Activity",source:"@site/docs/40_modules/60_wfe/guides/Workflow Worker/development.md",sourceDirName:"40_modules/60_wfe/guides/Workflow Worker",slug:"/modules/wfe/guides/Workflow Worker/development",permalink:"/aoh-docs/docs/modules/wfe/guides/Workflow Worker/development",draft:!1,unlisted:!1,editUrl:"https://github.com/mssfoobar/aoh-docs/tree/main/docs/40_modules/60_wfe/guides/Workflow Worker/development.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"wfe",previous:{title:"\ud83d\udcbb Development",permalink:"/aoh-docs/docs/modules/wfe/guides/Workflow Engine/development"},next:{title:"Form Designer",permalink:"/aoh-docs/docs/modules/wfe/Designer Suite/form_designer"}},c={},l=[{value:"Activity",id:"activity",level:2},{value:"Activity Function Definition",id:"activity-function-definition",level:3},{value:"Activity Registration",id:"activity-registration",level:3},{value:"Activity Heartbeat",id:"activity-heartbeat",level:3}];function d(t){const e={admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"-development",children:"\ud83d\udcbb Development"}),"\n",(0,r.jsx)(e.h2,{id:"activity",children:"Activity"}),"\n",(0,r.jsx)(e.p,{children:"An Activity is a normal function or method that executes a single, well-defined action (either short or long-running), such as calling another service, transcoding a media file, or sending an email message. Activity code should be deterministic."}),"\n",(0,r.jsx)(e.h3,{id:"activity-function-definition",children:"Activity Function Definition"}),"\n",(0,r.jsx)(e.p,{children:"Let's define a simple activity which has input and output as string data type."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-go",children:'// this type can be named whatever your want\ntype Activities struct{}\n\nfunc (a *Activities) SimpleActivity(ctx context.Context, input []interface{}) (string, error) {\n  str, ok := input[0].(string)\n\tif !ok {\n\t\treturn nil, errors.New("invalid input")\n\t}\n\treturn "Result_" + str, nil\n}\n'})}),"\n",(0,r.jsxs)(e.p,{children:["The first parameter of an activity definition is a context.",(0,r.jsx)(e.br,{}),"\n","Context is used by Temporal to pass around Workflow Execution Context."]}),"\n",(0,r.jsxs)(e.p,{children:["The second parameter is an array of interface",".\nWe use an array of interface"," to support the Workflow Engine to interpret as many parameters as defined by the Activity Developer.",(0,r.jsx)(e.br,{}),"\n","It is important to always typecast the input parameter and return an error if there is one to avoid runtime errors."]}),"\n",(0,r.jsx)(e.p,{children:"Then we return the result as a string."}),"\n",(0,r.jsx)(e.h3,{id:"activity-registration",children:"Activity Registration"}),"\n",(0,r.jsxs)(e.p,{children:["To register activities in the temporal server, simply register the pointer of the struct activity methods are associated with.\nFor example, if we want to register the ",(0,r.jsx)(e.code,{children:"SimpleActivity"})," we created earlier, we just need to pass the ",(0,r.jsx)(e.code,{children:"Activities"})," struct pointer."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-go",children:'func main() {\n// ...\n    yourWorker := worker.New(temporalClient, "your-custom-task-queue-name", worker.Options{})\n\n    yourWorker.RegisterActivityWithOptions(&Activities{})\n\n    err = yourWorker.Run(worker.InterruptCh())\n// ...\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"activity-heartbeat",children:"Activity Heartbeat"}),"\n",(0,r.jsx)(e.admonition,{type:"info",children:(0,r.jsx)(e.p,{children:"To allow cancellation of the activity, it must heartbeat periodically"})}),"\n",(0,r.jsx)(e.p,{children:"If the activity is a long-running process (eg Event listener), it must heartbeat to allow the activity cancellation."}),"\n",(0,r.jsx)(e.p,{children:"Below is an example HttpCall activity. Note that before and after executing long-running processes, it will heartbeat and catch cancellation from the workflow."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-go",children:'// HttpCall take in \'method\', \'endpoint\' and \'payload\' as input\n// Successful execution return http response\nfunc (a *Activities) HttpCall(ctx context.Context, input []interface{}) (interface{}, error) {\n\tlogger := activity.GetLogger(ctx)\n\n\tmethod, ok := input[0].(string)\n\tif !ok {\n\t\treturn nil, errors.New("invalid input")\n\t}\n\tendpoint, ok := input[1].(string)\n\tif !ok {\n\t\treturn nil, errors.New("invalid input")\n\t}\n\tpayload, ok := input[2].(string)\n\tif !ok {\n\t\treturn nil, errors.New("invalid input")\n\t}\n\n\tb := []byte(payload)\n\n\tclient := &http.Client{}\n\n\treq, err := http.NewRequest(method, endpoint, bytes.NewReader(b))\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// heartbeat report before long-running process\n\tactivity.RecordHeartbeat(ctx, "status-report-to-workflow")\n    // catch cancellation from workflow by checking ctx.Done\n\tselect {\n\tcase <-ctx.Done():\n\t    return nil, ctx.Err()\n\tdefault:\n\t}\n\t\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// heartbeat after long-running process\n\tactivity.RecordHeartbeat(ctx, "status-report-to-workflow")\n    // catch cancellation from workflow by checking ctx.Done\n\tselect {\n\tcase <-ctx.Done():\n\t\treturn nil, ctx.Err()\n\tdefault:\n\t}\n\n\tbody, err := io.ReadAll(res.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer func() {\n\t\tif err := res.Body.Close(); err != nil {\n\t\t\tlogger.Error(err.Error())\n\t\t}\n\t}()\n\n\tvar result interface{}\n\tif err := json.Unmarshal(body, &result); err != nil {\n\t\treturn nil, err\n\t}\n\n\t// catch cancellation from workflow by checking ctx.Done\n\tselect {\n\tcase <-ctx.Done():\n\t\treturn nil, ctx.Err()\n\tdefault:\n\t}\n\n\treturn result, nil\n}\n'})})]})}function u(t={}){const{wrapper:e}={...(0,i.R)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(d,{...t})}):d(t)}},28453:(t,e,n)=>{n.d(e,{R:()=>a,x:()=>s});var r=n(96540);const i={},o=r.createContext(i);function a(t){const e=r.useContext(o);return r.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function s(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:a(t.components),r.createElement(o.Provider,{value:e},t.children)}}}]);