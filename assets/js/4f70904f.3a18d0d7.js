"use strict";(self.webpackChunkaoh_documentation=self.webpackChunkaoh_documentation||[]).push([[4985],{2367:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>g,frontMatter:()=>l,metadata:()=>d,toc:()=>a});var o=i(74848),t=i(28453);const l={sidebar_position:40},s="Logging & Exception Handling",d={id:"development/guidelines/coding/logging_and_exception_handling",title:"Logging & Exception Handling",description:"The ultimate purpose of standardizing our logging and exception handling is to make it easier to debug the system.",source:"@site/docs/20_development/60_guidelines/20_coding/30_logging_and_exception_handling.md",sourceDirName:"20_development/60_guidelines/20_coding",slug:"/development/guidelines/coding/logging_and_exception_handling",permalink:"/aoh-docs/docs/development/guidelines/coding/logging_and_exception_handling",draft:!1,unlisted:!1,editUrl:"https://github.com/mssfoobar/aoh-docs/tree/main/docs/20_development/60_guidelines/20_coding/30_logging_and_exception_handling.md",tags:[],version:"current",sidebarPosition:40,frontMatter:{sidebar_position:40},sidebar:"development",previous:{title:"Svelte",permalink:"/aoh-docs/docs/development/guidelines/coding/svelte"}},r={},a=[{value:"TypeScript, Svelte (Frontend)",id:"typescript-svelte-frontend",level:2},{value:"Format",id:"format",level:3},{value:"Info vs Debug levels",id:"info-vs-debug-levels",level:3},{value:"Retries",id:"retries",level:3},{value:"TODO: Golang (Backend)",id:"todo-golang-backend",level:2},{value:"TODO: Logging Format",id:"todo-logging-format",level:3},{value:"TODO: Exception Handling",id:"todo-exception-handling",level:3}];function c(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"logging--exception-handling",children:"Logging & Exception Handling"}),"\n",(0,o.jsx)(n.p,{children:"The ultimate purpose of standardizing our logging and exception handling is to make it easier to debug the system.\nLogging in a specific format allows us to filter logs across services, and standardizing exception handling allows us\nto make better sense of the errors thrown."}),"\n",(0,o.jsx)(n.h2,{id:"typescript-svelte-frontend",children:"TypeScript, Svelte (Frontend)"}),"\n",(0,o.jsx)(n.h3,{id:"format",children:"Format"}),"\n",(0,o.jsx)(n.p,{children:"The logs must be formatted as a JSON - this allows us to perform searches based on the key, as well as pretty print\nthe logs using tools:"}),"\n",(0,o.jsx)(n.p,{children:"It must minimally have one of the following log levels:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"TRACE"}),"\n",(0,o.jsx)(n.li,{children:"DEBUG"}),"\n",(0,o.jsx)(n.li,{children:"INFO"}),"\n",(0,o.jsx)(n.li,{children:"WARN"}),"\n",(0,o.jsx)(n.li,{children:"ERROR"}),"\n",(0,o.jsx)(n.li,{children:"FATAL"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n    "level": "INFO",\n    ...\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"Any other data can then be included as more keys in the log object:"}),"\n",(0,o.jsx)(n.p,{children:"Example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n    "level": "ERROR",\n    "timestamp": "2023-10-25T03:06:23.423+0000",\n    "message": "Failed to secure the crown jewels. Aborting."\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"info-vs-debug-levels",children:"Info vs Debug levels"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"INFO"})," logs should be used sparingly on important events that occur infrequently"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"DEBUG"})," logs can be used liberally. Useful logs that are used during application development can be left\nin production code but at ",(0,o.jsx)(n.code,{children:"DEBUG"})," or ",(0,o.jsx)(n.code,{children:"TRACE"})," as these will not be printed in production environments."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"retries",children:"Retries"}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["TLDR; errors that result in retries should be logged as ",(0,o.jsx)(n.code,{children:"WARN"})]})}),"\n",(0,o.jsxs)(n.p,{children:["Often, there might be processes that result in errors that are actually anticpated or expected (for example, token expiries,\nor network errors might be retried) - these errors might be retried, and succeeded. In those scenarios, the errors should\nbe logged with ",(0,o.jsx)(n.code,{children:"WARN"}),", only the final error should be logged as ",(0,o.jsx)(n.code,{children:"ERROR"}),", or maybe even ",(0,o.jsx)(n.code,{children:"FATAL"})," in fatal/panic scenarios."]}),"\n",(0,o.jsx)(n.h2,{id:"todo-golang-backend",children:"TODO: Golang (Backend)"}),"\n",(0,o.jsx)(n.h3,{id:"todo-logging-format",children:"TODO: Logging Format"}),"\n",(0,o.jsx)(n.h3,{id:"todo-exception-handling",children:"TODO: Exception Handling"})]})}function g(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>d});var o=i(96540);const t={},l=o.createContext(t);function s(e){const n=o.useContext(l);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(l.Provider,{value:n},e.children)}}}]);