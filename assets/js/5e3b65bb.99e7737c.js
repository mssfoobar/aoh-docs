"use strict";(self.webpackChunkar2_documentation=self.webpackChunkar2_documentation||[]).push([[5050],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),m=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=m(e.components);return o.createElement(c.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=m(n),d=r,f=u["".concat(c,".").concat(d)]||u[d]||p[d]||a;return n?o.createElement(f,i(i({ref:t},l),{},{components:n})):o.createElement(f,i({ref:t},l))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var m=2;m<a;m++)i[m]=n[m];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},91628:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>m});var o=n(87462),r=(n(67294),n(3905));const a={sidebar_position:2},i="Conventional Commits",s={unversionedId:"source_management/conventional_commits",id:"source_management/conventional_commits",title:"Conventional Commits",description:"Conventional commits is a specification for adding human and machine readable meaning to commit messages.",source:"@site/docs/source_management/conventional_commits.md",sourceDirName:"source_management",slug:"/source_management/conventional_commits",permalink:"/ar2-docs/docs/source_management/conventional_commits",draft:!1,editUrl:"https://github.com/mssfoobar/ar2-docs/tree/main/docs/source_management/conventional_commits.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"source_management",previous:{title:"Version Control System",permalink:"/ar2-docs/docs/source_management/branching_strategy"},next:{title:"Signing Commits",permalink:"/ar2-docs/docs/source_management/verified_commits"}},c={},m=[{value:"Summary",id:"summary",level:2},{value:"Why conventional commits?",id:"why-conventional-commits",level:2}],l={toc:m};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"conventional-commits"},"Conventional Commits"),(0,r.kt)("p",null,"Conventional commits is a specification for adding human and machine readable meaning to commit messages."),(0,r.kt)("p",null,"The specification is well documented, read more about conventional commits ",(0,r.kt)("a",{parentName:"p",href:"https://www.conventionalcommits.org/"},"here"),"."),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"The Conventional Commits specification is a lightweight convention on top of commit messages. It provides an easy set\nof rules for creating an explicit commit history; which makes it easier to write automated tools on top of. This\nconvention dovetails with ",(0,r.kt)("a",{parentName:"p",href:"https://semver.org/"},"SemVer"),", by describing the features, fixes, and breaking changes made in\ncommit messages."),(0,r.kt)("p",null,"The commit message should be structured as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<type>[optional scope]: <description>\n\n[optional body]\n\n[optional footer(s)]\n")),(0,r.kt)("h2",{id:"why-conventional-commits"},"Why conventional commits?"),(0,r.kt)("p",null,"Following conventional commits allows many tools to parse and make sense of commits since they follow an agreed upon\nconvention. It also standardizes them in a format that lets the reader make sense of the commit. On our web server, we\nuse husky to apply a pre-commit check to enforce that developers commit with messages that follows conventional commits.\nWe can then use tools to generate release notes based on these commits - but the quality of these notes will directly be\nrelated to the quality of the commit messages and pull requests, so please take this practice seriously!"))}u.isMDXComponent=!0}}]);