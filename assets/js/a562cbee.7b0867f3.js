"use strict";(self.webpackChunkar2_documentation=self.webpackChunkar2_documentation||[]).push([[3187],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=o,f=c["".concat(s,".").concat(m)]||c[m]||d[m]||a;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},18679:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(67294),o=n(86010);const a="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return r.createElement("div",{role:"tabpanel",className:(0,o.Z)(a,i),hidden:n},t)}},34259:(e,t,n)=>{n.d(t,{Z:()=>m});var r=n(87462),o=n(67294),a=n(86010),i=n(51048),l=n(33609),s=n(1943),p=n(72957);const u="tabList__CuJ",c="tabItem_LNqP";function d(e){const{lazy:t,block:n,defaultValue:i,values:d,groupId:m,className:f}=e,g=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=d??g.map((e=>{let{props:{value:t,label:n,attributes:r}}=e;return{value:t,label:n,attributes:r}})),h=(0,l.l)(b,((e,t)=>e.value===t.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===i?i:i??g.find((e=>e.props.default))?.props.value??g[0].props.value;if(null!==y&&!b.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:k}=(0,s.U)(),[w,N]=(0,o.useState)(y),C=[],{blockElementScrollPositionUntilNextRender:O}=(0,p.o5)();if(null!=m){const e=v[m];null!=e&&e!==w&&b.some((t=>t.value===e))&&N(e)}const E=e=>{const t=e.currentTarget,n=C.indexOf(t),r=b[n].value;r!==w&&(O(t),N(r),null!=m&&k(m,String(r)))},T=e=>{let t=null;switch(e.key){case"Enter":E(e);break;case"ArrowRight":{const n=C.indexOf(e.currentTarget)+1;t=C[n]??C[0];break}case"ArrowLeft":{const n=C.indexOf(e.currentTarget)-1;t=C[n]??C[C.length-1];break}}t?.focus()};return o.createElement("div",{className:(0,a.Z)("tabs-container",u)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":n},f)},b.map((e=>{let{value:t,label:n,attributes:i}=e;return o.createElement("li",(0,r.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>C.push(e),onKeyDown:T,onClick:E},i,{className:(0,a.Z)("tabs__item",c,i?.className,{"tabs__item--active":w===t})}),n??t)}))),t?(0,o.cloneElement)(g.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function m(e){const t=(0,i.Z)();return o.createElement(d,(0,r.Z)({key:String(t)},e))}},25370:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>c});var r=n(87462),o=(n(67294),n(3905)),a=n(34259),i=n(18679);const l={sidebar_position:2},s="Development",p={unversionedId:"mapping/development",id:"mapping/development",title:"Development",description:"Tools Required",source:"@site/docs/mapping/development.md",sourceDirName:"mapping",slug:"/mapping/development",permalink:"/ar2-docs/docs/mapping/development",draft:!1,editUrl:"https://github.com/mssfoobar/ar2-docs/tree/main/docs/mapping/development.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"mapping",previous:{title:"Introduction",permalink:"/ar2-docs/docs/mapping/introduction"},next:{title:"Geo-Entities",permalink:"/ar2-docs/docs/mapping/geoentity"}},u={},c=[{value:"Tools Required",id:"tools-required",level:2},{value:"Processing",id:"processing",level:2}],d={toc:c};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"development"},"Development"),(0,o.kt)("h1",{id:"pre-processing"},"Pre-processing"),(0,o.kt)("h2",{id:"tools-required"},"Tools Required"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"AutoCAD LT"),(0,o.kt)("li",{parentName:"ul"},"QGIS (Quantum Geographic Information System)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ogr2ogr")," from GDAL")),(0,o.kt)("p",null,"Building floor plans typically come in drawing formats such as ",(0,o.kt)("inlineCode",{parentName:"p"},".dwg"),", which is predominantly used by AutoCAD. To open\nthis file, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"LibreCAD")," or preferably ",(0,o.kt)("inlineCode",{parentName:"p"},"AutoCAD")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"AutoCAD LT"),'. The goal is to convert the drawing into\nGeoJSON, along with tag it with additional attributes that conforms to our concept of "Building" geo entities.'),(0,o.kt)("h2",{id:"processing"},"Processing"),(0,o.kt)("p",null,"The first thing you should do is to filter out which layers in the ",(0,o.kt)("inlineCode",{parentName:"p"},".dwg")," are of interest to you. Open up the file,\nfigure out what you need to keep, which would typically be walls and columns, and write these layers down. In our\nexample, we'll assume you want to keep the following layers:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"WINDOW"),(0,o.kt)("li",{parentName:"ul"},"WALL"),(0,o.kt)("li",{parentName:"ul"},"COLUMN")),(0,o.kt)("p",null,"Then, save the file as a ",(0,o.kt)("inlineCode",{parentName:"p"},".dxf"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"ogr2ogr")," does not play well with ",(0,o.kt)("inlineCode",{parentName:"p"},".dwg")," files, so use LibreCAD or AutoCAD to save the\nfile in ",(0,o.kt)("inlineCode",{parentName:"p"},".dxf"),". The result will be a ",(0,o.kt)("inlineCode",{parentName:"p"},".dxf")," file that can be processed by ",(0,o.kt)("inlineCode",{parentName:"p"},"ogr2ogr"),"."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"We've tried mass converting files using tools but the result was not processable by ",(0,o.kt)("inlineCode",{parentName:"p"},"ogr2ogr"),". You can experiment\nto get such tools to help deal with batch conversion but we only ever got ",(0,o.kt)("inlineCode",{parentName:"p"},"ogr2ogr")," readable conversions from LibreCAD\nand AutoCAD.")),(0,o.kt)("p",null,"Next, use ",(0,o.kt)("inlineCode",{parentName:"p"},"ogr2ogr")," to convert the drawing to GeoJSON with WGS84 as the coordinate reference system. ",(0,o.kt)("inlineCode",{parentName:"p"},"ogr2ogr")," does not\nproperly convert ",(0,o.kt)("inlineCode",{parentName:"p"},".dwg"),"."),(0,o.kt)("p",null,"layer names"),(0,o.kt)(a.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"Windows PowerShell",label:"Windows PowerShell",default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"ogr2ogr `\n-progress `\n-dialect sqlite `\n-sql \"SELECT * FROM entities WHERE layer in ('WALL', 'WINDOW', 'COLUMN')\" `\n-f 'GeoJSON' .\\output_file_name.geojson .\\input_file_name.dxf `\n-t_srs EPSG:4326 `\n-s_srs EPSG:3414\n"))),(0,o.kt)(i.Z,{value:"Linux",label:"Linux",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"ogr2ogr \\\n-progress \\\n-dialect sqlite \\\n-sql \"SELECT * FROM entities WHERE layer in ('WALL', 'WINDOW', 'COLUMN')\" \\\n-f 'GeoJSON' .\\output_file_name.geojson .\\input_file_name.dxf \\\n-t_srs EPSG:4326 \\\n-s_srs EPSG:3414\n")))),(0,o.kt)("p",null,"This does not georectify your GeoJSON, but transforms it to be in ",(0,o.kt)("inlineCode",{parentName:"p"},"WGS84")," format, which is what GeoJSON is supposed to\nbe in. You can then further transform the points to be properly georectified by running it through ",(0,o.kt)("inlineCode",{parentName:"p"},"ogr2ogr")," again. But\nfirst, we need to find 3 reference coordinates that we can pass to ",(0,o.kt)("inlineCode",{parentName:"p"},"ogr2ogr")," to do the transformation."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"cat .\\OMEGA_ONE_STY_7.geojson | jq 'del(.features[].properties.PaperSpace, .features[].properties.SubClasses, .features[].Linetype )' > new.geojson\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"aws codeartifact login --tool npm --repository ar2-npm-group --namespace fortawesome --domain agilrad --domain-owner 991204835536\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},".DWG > ODAFIleConverter("),".DWG) > ",(0,o.kt)("em",{parentName:"p"},".DXF > LibreCAD("),".DXF) > ",(0,o.kt)("em",{parentName:"p"},".DXF > ogr2ogr2("),".DXF) > .GeoJSON >"))}m.isMDXComponent=!0}}]);