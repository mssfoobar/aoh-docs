"use strict";(self.webpackChunkaoh_documentation=self.webpackChunkaoh_documentation||[]).push([[6666],{3905:(e,r,t)=>{t.d(r,{Zo:()=>l,kt:()=>f});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function p(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),c=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},l=function(e){var r=c(e.components);return n.createElement(s.Provider,{value:r},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),d=c(t),m=o,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||a;return t?n.createElement(f,i(i({ref:r},l),{},{components:t})):n.createElement(f,i({ref:r},l))}));function f(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var p={};for(var s in r)hasOwnProperty.call(r,s)&&(p[s]=r[s]);p.originalType=e,p[d]="string"==typeof e?e:o,i[1]=p;for(var c=2;c<a;c++)i[c]=t[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},15909:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>p,toc:()=>c});var n=t(87462),o=(t(67294),t(3905));const a={sidebar_position:20},i="Update Project Infra Repository",p={unversionedId:"development/devops_onboard/update-project-infra",id:"development/devops_onboard/update-project-infra",title:"Update Project Infra Repository",description:"Update the project infrastructure to reference the service infra repository that was created in earlier step.",source:"@site/docs/20_development/51_devops_onboard/20-update-project-infra.md",sourceDirName:"20_development/51_devops_onboard",slug:"/development/devops_onboard/update-project-infra",permalink:"/aoh-docs/docs/development/devops_onboard/update-project-infra",draft:!1,editUrl:"https://github.com/mssfoobar/aoh-docs/tree/main/docs/20_development/51_devops_onboard/20-update-project-infra.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20},sidebar:"development",previous:{title:"Setup Service Infra Repository",permalink:"/aoh-docs/docs/development/devops_onboard/setup-service-infra"},next:{title:"\ud83c\udf10 DevOps (maintenance)",permalink:"/aoh-docs/docs/category/-devops-maintenance"}},s={},c=[{value:"Pre-requisites",id:"pre-requisites",level:2},{value:"Setup IaC (Do only ONE of the following)",id:"setup-iac-do-only-one-of-the-following",level:2},{value:"Add repository to ArgoCD",id:"add-repository-to-argocd",level:2}],l={toc:c},d="wrapper";function u(e){let{components:r,...a}=e;return(0,o.kt)(d,(0,n.Z)({},l,a,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"update-project-infra-repository"},"Update Project Infra Repository"),(0,o.kt)("p",null,"Update the project infrastructure to reference the service infra repository that was created in earlier step."),(0,o.kt)("h2",{id:"pre-requisites"},"Pre-requisites"),(0,o.kt)("p",null,"Set the following environment variables"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# name of new service\n# e.g. ucs / rnr / wfe\nexport MYSERVICE=\n\n# URL to service infra repository\n# e.g. https://github.com/mssfoobar/ar2-ucs-infra\nexport MYSERVICE_REPO_URL=\n\n# path to required manifest from within service infra repository\n# e.g. for helm charts: dev/helm\nexport MYSERVICE_REPO_PATH=\n\n# full path to project's IaC repository root\n# e.g. full path to where the project IaC is checked out\nexport PRJ_IAC_ROOT=\n\n# project namespace\n# e.g. soh / hoc / aoc\nexport PRJ_NAMESPACE=\n")),(0,o.kt)("h2",{id:"setup-iac-do-only-one-of-the-following"},"Setup IaC (Do only ONE of the following)"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"For service infra using Helm Charts (non-reference) (TBD)\nCreate folder ",(0,o.kt)("inlineCode",{parentName:"p"},"${PRJ_IAC_ROOT}/helm/${MYSERVICE}"),"\n// TODO")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"For service infra using Helm Charts (referencing external service-infra repository).",(0,o.kt)("br",{parentName:"p"}),"\n","Create manifest for ",(0,o.kt)("em",{parentName:"p"},"myservice"),":"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cat > ${PRJ_IAC_ROOT}/apps-children/${PRJ_NAMESPACE}-${MYSERVICE}.yaml << EOF\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: ${PRJ_NAMESPACE}-${MYSERVICE}-dev\n  namespace: argocd\n  finalizers:\n  - resources-finalizer.argocd.argoproj.io\nspec:\n  destination:\n    namespace: ${PRJ_NAMESPACE}\n    name: in-cluster\n  project: appbundle-project-aoh-dev\n  source:\n    path: ${MYSERVICE_REPO_PATH}\n    repoURL: ${MYSERVICE_REPO_URL}\n    targetRevision: main\n  syncPolicy:\n    syncOptions:\n    - CreateNamespace=true\n    automated:\n      prune: true\n      allowEmpty: true\n      selfHeal: true\nEOF\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"For service infra using manifest files (TBD).",(0,o.kt)("br",{parentName:"p"}),"\n","Create manifest for ",(0,o.kt)("em",{parentName:"p"},"myservice"),":"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cat > ${PRJ_IAC_ROOT}/apps-children/${PRJ_NAMESPACE}-${MYSERVICE}.yaml << EOF\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: ${PRJ_NAMESPACE}-${MYSERVICE}-dev\n  namespace: argocd\n  finalizers:\n  - resources-finalizer.argocd.argoproj.io\nspec:\n  destination:\n    namespace: ${PRJ_NAMESPACE}\n    name: in-cluster\n  project: appbundle-project-aoh-dev\n  source:\n    path: ${MYSERVICE_REPO_PATH}\n    repoURL: ${MYSERVICE_REPO_URL}\n    targetRevision: main\n  syncPolicy:\n    syncOptions:\n    - CreateNamespace=true\n    automated:\n      prune: true\n      allowEmpty: true\n      selfHeal: true\nEOF\n")))),(0,o.kt)("h2",{id:"add-repository-to-argocd"},"Add repository to ArgoCD"),(0,o.kt)("p",null,"Engage administrator for the following procedure.",(0,o.kt)("br",{parentName:"p"}),"\n","From ArgoCD, ",(0,o.kt)("inlineCode",{parentName:"p"},"Settings > Repositories > Connect Repo"),".",(0,o.kt)("br",{parentName:"p"}),"\n","Fill up URL of service infra git repository, and credentials.\n",(0,o.kt)("img",{alt:"image",src:t(36676).Z,width:"777",height:"592"})))}u.isMDXComponent=!0},36676:(e,r,t)=>{t.d(r,{Z:()=>n});const n=t.p+"assets/images/add-repo-to-argocd-0a10202681589a8ab83561de477d125a.png"}}]);