"use strict";(self.webpackChunkaoh_documentation=self.webpackChunkaoh_documentation||[]).push([[7455],{27685:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var s=n(74848),i=n(28453);const o={sidebar_position:4},a="User Interface State",r={id:"web/api/ui_state",title:"User Interface State",description:"Automatically saving what the user was last doing can provide a seamless way for users to work across multiple devices.",source:"@site/docs/40_web/20_api/40_ui_state.md",sourceDirName:"40_web/20_api",slug:"/web/api/ui_state",permalink:"/aoh-docs/docs/web/api/ui_state",draft:!1,unlisted:!1,editUrl:"https://github.com/mssfoobar/aoh-docs/tree/main/docs/40_web/20_api/40_ui_state.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"web",previous:{title:"Piechart with Progress bar",permalink:"/aoh-docs/docs/web/api/charts/piechartwithprogressbar"},next:{title:"Modules",permalink:"/aoh-docs/docs/category/modules"}},c={},l=[];function d(e){const t={code:"code",h1:"h1",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"user-interface-state",children:"User Interface State"}),"\n",(0,s.jsxs)(t.p,{children:["Automatically saving what the user was last doing can provide a seamless way for users to work across multiple devices.\nIt can also allow them to resume their work without having to explicitly click ",(0,s.jsx)(t.code,{children:"save"})," every time."]}),"\n",(0,s.jsxs)(t.p,{children:["A ",(0,s.jsx)(t.code,{children:"uiState"})," store is provided in the core library (",(0,s.jsx)(t.code,{children:"src/lib/core/core.ts"}),") for this purpose."]}),"\n",(0,s.jsx)(t.p,{children:"To use the store, simply import it and add whatever UI state you need to store under the appropriate namespace when\nsaving, and read on initialization to restore the state."}),"\n",(0,s.jsx)(t.p,{children:"The following example shows how you might store user input that has not been submitted."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",children:'<script lang="ts" context="module">\n    import { uiState } from \'$lib/core/core\';\n    import { onMount } from \'svelte\';\n\n    const UI_STATE_EXAMPLE = "example_state_key";\n<\/script>\n\n<script lang="ts">\n\n    let inputValue = "";\n\n    onMount(()=> {\n        // Restore last saved input\n        inputValue = $uiState.other[UI_STATE_EXAMPLE];\n    });\n<\/script>\n\n<input bind:value={inputValue} on:input={()=>{\n    // Save input every time it is changed\n    $uiState.other[UI_STATE_EXAMPLE] = inputValue;\n}} />\n'})}),"\n",(0,s.jsxs)(t.p,{children:["You can update the ",(0,s.jsx)(t.code,{children:"uiState"})," store as frequently as you want (within reason), as calls to the API are automatically\nhandled by the framework and debounced at a reasonable threshold."]}),"\n",(0,s.jsx)(t.h1,{id:"limitations",children:"Limitations"}),"\n",(0,s.jsx)(t.p,{children:"As of the current implementation, there are some considerations to note:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"It might not be wise to store sensitive information in this state variable as it will be stored in the database"}),"\n",(0,s.jsx)(t.li,{children:"The UI state variable can grow very large if used loose-handedly or is not checked (e.g. storing unbounded user\ninputs)"}),"\n",(0,s.jsx)(t.li,{children:"Adding additional namespaces requires core change"}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var s=n(96540);const i={},o=s.createContext(i);function a(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);