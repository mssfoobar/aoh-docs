"use strict";(self.webpackChunkar2_documentation=self.webpackChunkar2_documentation||[]).push([[7084],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=o.createContext({}),p=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return o.createElement(s.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(t),d=a,g=m["".concat(s,".").concat(d)]||m[d]||u[d]||r;return t?o.createElement(g,i(i({ref:n},c),{},{components:t})):o.createElement(g,i({ref:n},c))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[m]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<r;p++)i[p]=t[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},11354:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var o=t(87462),a=(t(67294),t(3905));const r={sidebar_position:3},i="Deployment \ud83c\udf0e",l={unversionedId:"comms/guides/deployment",id:"comms/guides/deployment",title:"Deployment \ud83c\udf0e",description:"Building Images",source:"@site/docs/comms/guides/deployment.md",sourceDirName:"comms/guides",slug:"/comms/guides/deployment",permalink:"/ar2-docs/docs/comms/guides/deployment",draft:!1,editUrl:"https://github.com/mssfoobar/ar2-docs/tree/main/docs/comms/guides/deployment.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"comms",previous:{title:"Nats",permalink:"/ar2-docs/docs/comms/guides/nats"},next:{title:"Testing \ud83d\udd27",permalink:"/ar2-docs/docs/comms/guides/testing"}},s={},p=[{value:"Building Images",id:"building-images",level:2},{value:"Pushing to Container Registry",id:"pushing-to-container-registry",level:2},{value:"Deploy UCS in Docker Container",id:"deploy-ucs-in-docker-container",level:2},{value:"Deploy UCS in kubernetes",id:"deploy-ucs-in-kubernetes",level:2},{value:"Preparing Manifest Repo",id:"preparing-manifest-repo",level:3},{value:"Deploy Using ArgoCD",id:"deploy-using-argocd",level:3},{value:"Deploy Using kubectl",id:"deploy-using-kubectl",level:3},{value:"CI/CD Pipeline",id:"cicd-pipeline",level:2}],c={toc:p};function m(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"deployment-"},"Deployment \ud83c\udf0e"),(0,a.kt)("h2",{id:"building-images"},"Building Images"),(0,a.kt)("p",null,"Building all services in docker-compose file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose build\n")),(0,a.kt)("p",null,"Building a specifc service."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose build {service-name}\n")),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"It is important to build the image following below naming convention.\nOtherwise, pushing to ghcr will fail."),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"ghcr.io/NAMESPACE/IMAGE_NAME:tag\n")),(0,a.kt)("p",{parentName:"admonition"},"NAMESPACE must be personal account or organiztion to which the image will be scoped to.")),(0,a.kt)("h2",{id:"pushing-to-container-registry"},"Pushing to Container Registry"),(0,a.kt)("p",null,"This project used ghcr (github container registry) to store images."),(0,a.kt)("p",null,"Working with ghcr"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"create a new github personal access token with at least ",(0,a.kt)("inlineCode",{parentName:"li"},"write:pacakges")," access."),(0,a.kt)("li",{parentName:"ol"},"login to ghcr using cli.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"export CR_PAT=YOUR_TOKEN\necho $CR_PAT | docker login ghcr.io -u USERNAME --password-stdin\n")),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"push")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker push ghcr.io/NAMESPACE/IMAGE_NAME:latest\n")),(0,a.kt)("p",null,"For more details, refer to github offical ",(0,a.kt)("a",{parentName:"p",href:"https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry"},"documents")),(0,a.kt)("h2",{id:"deploy-ucs-in-docker-container"},"Deploy UCS in Docker Container"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose up -d --remove-orphans\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"UCS services use both ",(0,a.kt)("inlineCode",{parentName:"p"},".env")," and ",(0,a.kt)("inlineCode",{parentName:"p"},".toml"),"."),(0,a.kt)("p",{parentName:"admonition"},".env is used for passing secret keys and .toml is for configuration.")),(0,a.kt)("p",null,"Configuring docker-compose file."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set env variable")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"    environment:\n      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}\n      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}\n      - POSTGRESQL_USER=${POSTGRESQL_USER}\n      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Set toml config file location")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'    volumes:\n      - "./configs/docker/app-room-mgmt.toml:/configs/app-room-mgmt.toml"\n')),(0,a.kt)("h2",{id:"deploy-ucs-in-kubernetes"},"Deploy UCS in kubernetes"),(0,a.kt)("h3",{id:"preparing-manifest-repo"},"Preparing Manifest Repo"),(0,a.kt)("p",null,"Create a new repository with below directory for UCS services."),(0,a.kt)("p",null,"Create three yaml files for each UCS service."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},".\n\u2514\u2500\u2500 manifests\n    \u251c\u2500\u2500 {service-name}-config.yaml\n    \u251c\u2500\u2500 {service-name}-deployment.yaml\n    \u251c\u2500\u2500 {service-name}-service.yaml\n")),(0,a.kt)("p",null,"For detail explanation of yaml files, refer to official documents for: "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/concepts/workloads/controllers/deployment/"},"deployment.yaml")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/concepts/services-networking/service/"},"service.yaml")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/concepts/configuration/configmap/"},"config.yaml"))),(0,a.kt)("p",null,"You can use kompose to easily convert from docker-compose.yaml into deployment.yaml & service.yaml."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kompose convert -f docker-compose.yaml\n")),(0,a.kt)("p",null,"config.yaml is to load ucs config .toml into deployment."),(0,a.kt)("p",null,"Example config.yaml."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  creationTimestamp: null\n  name: app-room-mgmt-config\n  namespace: common-ucs\ndata:\n  app-room-mgmt.toml: |\n    [log]\n    level = "info"\n    ...\n')),(0,a.kt)("p",null,"And mount the config.yaml in deployment.yaml volumes."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"apiVersion: apps/v1\nkind: Deployment\nspec:\n  template:\n    spec:\n      volumes:\n        - name: app-room-mgmt-claim0\n          configMap:\n            name: app-room-mgmt-config\n\n")),(0,a.kt)("h3",{id:"deploy-using-argocd"},"Deploy Using ArgoCD"),(0,a.kt)("p",null,"If ArgoCD is setup for kubernetes deployment, you just have to create entrypoint for ArgoCD to find the manifest repo."),(0,a.kt)("p",null,"Create a yaml inside the repo where ArgoCD will look for entrypoint."),(0,a.kt)("p",null,"Make sure to provide the repoURL and path of minifest repo."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: ucs\n  namespace: argocd\n  finalizers:\n  - resources-finalizer.argocd.argoproj.io\nspec:\n  destination:\n    namespace: common-ucs\n    name: in-cluster\n  project: appbundle-project-ar2-dev\n  source:\n    path: manifests\n    repoURL: https://github.com/example/ucs\n    targetRevision: main\n  syncPolicy:\n    syncOptions:\n    - CreateNamespace=true\n    automated:\n      prune: true\n      allowEmpty: true\n      selfHeal: true\n")),(0,a.kt)("p",null,"Check if the Deployment was created using ArgoCD dashboard."),(0,a.kt)("h3",{id:"deploy-using-kubectl"},"Deploy Using kubectl"),(0,a.kt)("p",null,"Before you begin, make sure your Kubernetes cluster is up and running. Follow the steps given below to create the above Deployment:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Create the Deployment by running the following command:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f https://github.com/example/ucs/manifest/app-room-mgmt-deployment.yaml\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Run ",(0,a.kt)("inlineCode",{parentName:"li"},"kubectl get deployments")," to check if the Deployment was created.")),(0,a.kt)("h2",{id:"cicd-pipeline"},"CI/CD Pipeline"),(0,a.kt)("p",null,"Every commit to main branch will trigger the github action workflow."),(0,a.kt)("p",null,"Following actions will be triggered by workflow -"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"build & push the images into ghcr (github container registry)"),(0,a.kt)("li",{parentName:"ul"},"update the image tags in manifest files of staging server")),(0,a.kt)("p",null,"Upon the update of mainfest files, ArgoCD will pickup new images' tag to deploy latest servces. "),(0,a.kt)("p",null,"Refer to ",(0,a.kt)("inlineCode",{parentName:"p"},"publish.yml")," inside ",(0,a.kt)("inlineCode",{parentName:"p"},".github/workflows")," for more details."))}m.isMDXComponent=!0}}]);