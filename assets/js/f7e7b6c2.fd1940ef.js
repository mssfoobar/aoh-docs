"use strict";(self.webpackChunkar2_documentation=self.webpackChunkar2_documentation||[]).push([[7084],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),g=o,d=m["".concat(s,".").concat(g)]||m[g]||u[g]||i;return n?r.createElement(d,a(a({ref:t},p),{},{components:n})):r.createElement(d,a({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},11354:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const i={sidebar_position:3},a="Deployment \ud83c\udf0e",l={unversionedId:"comms/guides/deployment",id:"comms/guides/deployment",title:"Deployment \ud83c\udf0e",description:"Building Images",source:"@site/docs/comms/guides/deployment.md",sourceDirName:"comms/guides",slug:"/comms/guides/deployment",permalink:"/ar2-docs/docs/comms/guides/deployment",draft:!1,editUrl:"https://github.com/mssfoobar/ar2-docs/tree/main/docs/comms/guides/deployment.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"comms",previous:{title:"Nats",permalink:"/ar2-docs/docs/comms/guides/nats"},next:{title:"Testing \ud83d\udd27",permalink:"/ar2-docs/docs/comms/guides/testing"}},s={},c=[{value:"Building Images",id:"building-images",level:2},{value:"Pushing to Container Registry",id:"pushing-to-container-registry",level:2},{value:"Deploying Images in Docker Container",id:"deploying-images-in-docker-container",level:2},{value:"CI/CD Pipeline",id:"cicd-pipeline",level:2}],p={toc:c};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"deployment-"},"Deployment \ud83c\udf0e"),(0,o.kt)("h2",{id:"building-images"},"Building Images"),(0,o.kt)("p",null,"Building all services in docker-compose file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose build\n")),(0,o.kt)("p",null,"Building a specifc service."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose build {service-name}\n")),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"It is important to build the image following below naming convention.\nOtherwise, pushing to ghcr will fail."),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"ghcr.io/NAMESPACE/IMAGE_NAME:tag\n")),(0,o.kt)("p",{parentName:"admonition"},"NAMESPACE must be personal account or organiztion to which the image will be scoped to.")),(0,o.kt)("h2",{id:"pushing-to-container-registry"},"Pushing to Container Registry"),(0,o.kt)("p",null,"This project used ghcr (github container registry) to store images."),(0,o.kt)("p",null,"Working with ghcr"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"create a new github personal access token with at least ",(0,o.kt)("inlineCode",{parentName:"li"},"write:pacakges")," access."),(0,o.kt)("li",{parentName:"ol"},"login to ghcr using cli.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"export CR_PAT=YOUR_TOKEN\necho $CR_PAT | docker login ghcr.io -u USERNAME --password-stdin\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"push")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker push ghcr.io/NAMESPACE/IMAGE_NAME:latest\n")),(0,o.kt)("p",null,"For more details, refer to github offical ",(0,o.kt)("a",{parentName:"p",href:"https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry"},"documents")),(0,o.kt)("h2",{id:"deploying-images-in-docker-container"},"Deploying Images in Docker Container"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose up -d --remove-orphans\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"UCS services use both ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," and ",(0,o.kt)("inlineCode",{parentName:"p"},".toml"),"."),(0,o.kt)("p",{parentName:"admonition"},".env is used for passing secret keys and .toml is for configuration.")),(0,o.kt)("p",null,"Configuring docker-compose file."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Set env variable")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"    environment:\n      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}\n      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}\n      - POSTGRESQL_USER=${POSTGRESQL_USER}\n      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Set toml config file location")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'    volumes:\n      - "./configs/docker/app-room-mgmt.toml:/configs/app-room-mgmt.toml"\n')),(0,o.kt)("h2",{id:"cicd-pipeline"},"CI/CD Pipeline"),(0,o.kt)("p",null,"Every commit to main branch will trigger the github action workflow."),(0,o.kt)("p",null,"Following actions will be triggered by workflow -"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"build & push the images into ghcr (github container registry)"),(0,o.kt)("li",{parentName:"ul"},"update the image tags in manifest files of staging server")),(0,o.kt)("p",null,"Upon the update of mainfest files, Argo CD (continous delivery tool) will be notified new images' tag to deploy latest. "),(0,o.kt)("p",null,"Refer to ",(0,o.kt)("inlineCode",{parentName:"p"},"publish.yml")," inside ",(0,o.kt)("inlineCode",{parentName:"p"},".github/workflows")," for more details."))}m.isMDXComponent=!0}}]);