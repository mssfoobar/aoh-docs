"use strict";(self.webpackChunkaoh_documentation=self.webpackChunkaoh_documentation||[]).push([[1808],{26670:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>h});var s=t(74848),i=t(28453),r=t(45645),o=t(7227);const a={sidebar_position:3},l="Development",c={id:"modules/web/guides/development",title:"Development",description:"The scope of this document is not to be a tutorial on Svelte and",source:"@site/docs/40_modules/20_web/10_guides/3-development.mdx",sourceDirName:"40_modules/20_web/10_guides",slug:"/modules/web/guides/development",permalink:"/aoh-docs/docs/modules/web/guides/development",draft:!1,unlisted:!1,editUrl:"https://github.com/mssfoobar/aoh-docs/tree/main/docs/40_modules/20_web/10_guides/3-development.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"web",previous:{title:"Configuration",permalink:"/aoh-docs/docs/modules/web/guides/configuration"},next:{title:"Testing",permalink:"/aoh-docs/docs/category/testing"}},d={},h=[{value:"Creating A Simple Svelte Component",id:"creating-a-simple-svelte-component",level:2},{value:"index.svelte",id:"indexsvelte",level:3},{value:"index.d.ts",id:"indexdts",level:3},{value:"test.svelte",id:"testsvelte",level:3},{value:"comp.test.ts",id:"comptestts",level:3},{value:"Styling and Theming",id:"styling-and-theming",level:2},{value:"Pulling data with GraphQL",id:"pulling-data-with-graphql",level:2},{value:"Making a GraphQL query",id:"making-a-graphql-query",level:3},{value:"Making a GraphQL Subscriptions",id:"making-a-graphql-subscriptions",level:3},{value:"Query Types &amp; GraphQL Codegen",id:"query-types--graphql-codegen",level:3},{value:"Handling Authentication",id:"handling-authentication",level:2},{value:"JWT Access Token",id:"jwt-access-token",level:3},{value:"Broken Queries, Subscriptions, and Retries",id:"broken-queries-subscriptions-and-retries",level:3},{value:"Managing State",id:"managing-state",level:2},{value:"FontAwesome",id:"fontawesome",level:2},{value:"Testing",id:"testing",level:2},{value:"Creating Endpoints",id:"creating-endpoints",level:2},{value:"Standard endpoint message format",id:"standard-endpoint-message-format",level:3}];function u(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"development",children:"Development"}),"\n",(0,s.jsxs)(n.p,{children:["The scope of this document is not to be a tutorial on ",(0,s.jsx)(n.a,{href:"https://svelte.dev/tutorial/basics",children:"Svelte"})," and\n",(0,s.jsx)(n.a,{href:"https://kit.svelte.dev/docs/introduction",children:"Svelte Kit"}),", you should visit their official documentation to learn more\nabout them. This is meant to be a quick reference to help you can create components using our stack; how our folders are\nstructured, how ",(0,s.jsx)(n.code,{children:"state"})," is managed, how we approach unit and end-to-end testing, etc."]}),"\n",(0,s.jsx)(n.h2,{id:"creating-a-simple-svelte-component",children:"Creating A Simple Svelte Component"}),"\n",(0,s.jsxs)(n.p,{children:["Our components rest inside the ",(0,s.jsx)(n.code,{children:"src/lib/components"})," folder. Each component rests in a separate folder with the following\nfiles:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"index.svelte"}),": The Svelte file for the component"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"index.d.ts"}),": Ambient declaration file to support the component"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"test.svelte"}),": An instantiation of the component, used to test the component, as well as provide examples on how to\nuse it"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"comp.test.ts"}),": The ",(0,s.jsx)(n.em,{children:"Playwright"})," test for the component - the project is configured to visit and perform actions on\nthe ",(0,s.jsx)(n.em,{children:"test.svelte"})," file via the ",(0,s.jsx)(n.code,{children:"/tests"})," route."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"indexsvelte",children:(0,s.jsx)(n.a,{href:"https://svelte.dev/repl/286607b464814418b643d47400463644?version=3.49.0",children:"index.svelte"})}),"\n",(0,s.jsxs)(n.p,{children:["View the code on ",(0,s.jsx)(n.a,{href:"https://svelte.dev/repl/286607b464814418b643d47400463644?version=3.49.0",children:"Svelte REPL"})]}),"\n",(0,s.jsx)(n.p,{children:"The following is a simple Svelte component demonstrating data binding, reactivity, and iteratively rendering based on\ndata."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",metastring:'title="index.svelte"',children:'<script>\n\tlet exampleObjects = [];\n\tlet currentText = "Hello new developer!";\n\n\tlet totalCount = 1;\n\n\tfunction addObject() {\n\t\texampleObjects.push({text: currentText, count: totalCount});\n\t\texampleObjects = exampleObjects; // reactivity is based on assignments, assign it to itself to force reactivity\n\t\ttotalCount++;\n\t}\n<\/script>\n\n<input type="text" bind:value={currentText}>\n<button on:click={addObject}>\n\tADD OBJECT\n</button>\n<div>\n\t{#each exampleObjects as xo }\n\t\t<div>\n\t\t\t{xo.count}. {xo.text}\n\t\t</div>\n\t{/each}\n</div>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Though ",(0,s.jsx)(n.code,{children:"JavaScript"})," is loved for it's speed of development and flexibility, the great freedom provided by it also makes\nmaintaining large projects a nightmare. ",(0,s.jsx)(n.code,{children:"TypeScript"})," is a must - it allows yourself and other developers to understand\nthe shape of the objects being passed around. To have your types available throughout the project, we use an ambient\ntypescript declaration file:"]}),"\n",(0,s.jsx)(n.h3,{id:"indexdts",children:"index.d.ts"}),"\n",(0,s.jsx)(n.p,{children:"Here's an example declaration for the component we wrote:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="index.d.ts"',children:"declare interface ExampleObject {\n    text: string;\n    count: number;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["And here is the TypeScript version of that componet (the ",(0,s.jsx)(n.code,{children:"index.svelte"}),") shown earlier."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",metastring:'title="index.svelte"',children:'<script lang="ts">\n\tlet exampleObjects: Array<ExampleObject> = [];\n\tlet currentText = "Hello new developer!";\n\n\tlet totalCount = 1;\n\n\tfunction addObject() {\n\t\texampleObjects.push({text: currentText, count: totalCount});\n\t\texampleObjects = exampleObjects;\n\t\ttotalCount++;\n\t}\n<\/script>\n\n<input type="text" bind:value={currentText}>\n<button on:click={addObject}>\n\tADD OBJECT\n</button>\n<div>\n\t{#each exampleObjects as xo }\n\t\t<div>\n\t\t\t{xo.count}. {xo.text}\n\t\t</div>\n\t{/each}\n</div>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["With the ambient declaration file, we can use the ",(0,s.jsx)(n.code,{children:"ExampleObject"})," throughout our project, enabling great features like\ntype checking and IntelliSense."]}),"\n",(0,s.jsx)(n.h3,{id:"testsvelte",children:(0,s.jsx)(n.a,{href:"https://svelte.dev/repl/54ac8421e91e4506aa515ce92290fb9e?version=3.49.0",children:"test.svelte"})}),"\n",(0,s.jsxs)(n.p,{children:["Every component should have examples on how to use them, and tests to ensure they are running correct. We provide these\nby having a ",(0,s.jsx)(n.code,{children:"test.svelte"})," file next to our ",(0,s.jsx)(n.code,{children:"index.svelte"})," file."]}),"\n",(0,s.jsxs)(n.p,{children:["Example usage of ",(0,s.jsx)(n.code,{children:"index.svelte"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",metastring:'title="test.svelte"',children:"<script>\n\timport DeveloperGreeter from './index.svelte';\n<\/script>\n\n<div>\n\t<h1>\n\t\tLook at this thing I made:\n\t</h1>\n\t<DeveloperGreeter />\n</div>\n"})}),"\n",(0,s.jsx)(n.h3,{id:"comptestts",children:"comp.test.ts"}),"\n",(0,s.jsxs)(n.p,{children:["For unit-testing components, we have the component folder structure mirrored in the ",(0,s.jsx)(n.code,{children:"/tests"})," route, and we dynamically\nrender the components based on the route. We then have ",(0,s.jsx)(n.code,{children:"Playwright"})," visit the component pages to perform tests on them."]}),"\n",(0,s.jsxs)(n.p,{children:["Here is a sample of what the ",(0,s.jsx)(n.code,{children:"comp.test.ts"})," file might look like for the component we wrote above:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",metastring:'title="comp.test.ts"',children:'import { test } from "@playwright/test";\n\ntest("click buttons", async ({ page }) => {\n    // Go to http://localhost:4173/tests/components/basic/Button\n    await page.goto("http://localhost:4173/tests/components/DeveloperGreeter");\n    await page.locator("text=\'ADD OBJECT\'").click();\n    await page.locator("text=\'1. Hello new developer!\'").toBeVisible();\n});\n'})}),"\n",(0,s.jsxs)(n.p,{children:["In the future, we might switch to Playwright's ",(0,s.jsx)(n.a,{href:"https://playwright.dev/docs/test-components",children:(0,s.jsx)(n.code,{children:"components"})})," feature.\nHowever, it is still currently experiemental."]}),"\n",(0,s.jsx)(n.h2,{id:"styling-and-theming",children:"Styling and Theming"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://tailwindcss.com/",children:"Tailwind CSS"})," is a responsive, highly extensible, utility-first CSS framework. It has a\ndesign system built-in, like Bootstrap, but unlike Bootstrap, it is much more flexible and meant to be used a little\nbit like in-lining your CSS. Read their ",(0,s.jsx)(n.a,{href:"https://tailwindcss.com/docs/utility-first",children:"core concepts"})," to learn more\nabout the rationale behind Tailwind."]}),"\n",(0,s.jsxs)(n.p,{children:["For theming, we use ",(0,s.jsx)(n.a,{href:"https://tailwindcss.com/docs/theme",children:"Tailwind's theme configuration system"})," to create our own\nthemes. In the ",(0,s.jsx)(n.code,{children:"tailwind.config.cjs"})," file, you can see how we have it extended."]}),"\n",(0,s.jsxs)(n.p,{children:["The colors are named and assigned to a list of CSS variables that are assigned to the root element (",(0,s.jsx)(n.code,{children:"html"}),") - you can\nsee this in the ",(0,s.jsx)(n.code,{children:"app.html"})," file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",metastring:'title="app.html"',children:'<html lang="en" class="theme-1 bg-background"></html>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The default theme is called ",(0,s.jsx)(n.code,{children:"theme-1"})," and ",(0,s.jsx)(n.code,{children:"bg-background"})," is the background color (specified with ",(0,s.jsx)(n.code,{children:"bg-"}),") using the\n",(0,s.jsx)(n.code,{children:"background"})," key that we've assigned in the ",(0,s.jsx)(n.code,{children:"tailwind.config.cjs"})," file. That ",(0,s.jsx)(n.code,{children:"background"})," is given the CSS variable\n",(0,s.jsx)(n.code,{children:"--background-color: 255 255 255"}),", which is defined in ",(0,s.jsx)(n.code,{children:"themes.css"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",metastring:'title="themes.css"',children:"--background-color: 255 255 255;\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Changing this variable changes the color for anything using ",(0,s.jsx)(n.code,{children:"background"})," and that is how we change themes on the fly."]}),"\n",(0,s.jsxs)(n.p,{children:["To define more themes, simply add more classes to the ",(0,s.jsx)(n.code,{children:"themes.css"})," file and change the class on the ",(0,s.jsx)(n.code,{children:"html"})," element."]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n","\n",(0,s.jsxs)(r.A,{children:[(0,s.jsx)(o.default,{value:"theme",label:"themes.css",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-css",metastring:'title="themes.css"',children:"... {\n    /* other themes... */\n}\n\n.theme-2 {\n    /* Primary */\n    --primary-color: 62 78 111;\n    --on-primary-color: 222 222 222;\n    --primary-light-color: 124 124 255;\n    --primary-dark-color: 12 13 80;\n\n    /* Secondary */\n    --secondary-color: 152 170 32;\n    --on-secondary-color: 12 12 12;\n\n    /* and so on... */\n}\n\n... {\n    /* other themes... */\n}\n"})})}),(0,s.jsx)(o.default,{value:"html",label:"app.html",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",metastring:'title="app.html"',children:'<html lang="en" class="theme-2 bg-background"></html>\n'})})})]}),"\n",(0,s.jsx)(n.h2,{id:"pulling-data-with-graphql",children:"Pulling data with GraphQL"}),"\n",(0,s.jsxs)(n.p,{children:["Our framework uses ",(0,s.jsx)(n.a,{href:"https://graphql.org/",children:"GraphQL"})," to pull data from the server, and ",(0,s.jsx)(n.code,{children:"GraphQL Subscriptions"})," to receive\nupdates."]}),"\n",(0,s.jsx)(n.h3,{id:"making-a-graphql-query",children:"Making a GraphQL query"}),"\n",(0,s.jsxs)(n.p,{children:["In your ",(0,s.jsx)(n.code,{children:"index.svelte"})," or more likely, your ",(0,s.jsx)(n.code,{children:"+page.ts"})," or ",(0,s.jsx)(n.code,{children:"+page.server.ts"})," file (please read up on\n",(0,s.jsx)(n.a,{href:"https://kit.svelte.dev/docs/routing#page-page-server-js",children:"routing in Svelte Kit"}),"), you can make a GraphQL query using\nthe ",(0,s.jsx)(n.code,{children:"gql"})," tag. The ",(0,s.jsx)(n.code,{children:"graphql-tag"})," package provides this ability to convert the JavaScript template literal into a GraphQL\nAST, which is then used by ",(0,s.jsx)(n.code,{children:"graphql-codegen"})," to generate types for us to safely use."]}),"\n",(0,s.jsx)(n.p,{children:"Example usage:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"gql`\n    query WidgetConfig {\n        configuration_widget {\n            config\n            name\n            type\n            uuid\n        }\n    }\n`;\n"})}),"\n",(0,s.jsx)(n.p,{children:"We store our GraphQL client (urql) in a Svelte Store, which you can get, and use to make queries via urql's API."}),"\n",(0,s.jsxs)(n.admonition,{type:"warning",children:[(0,s.jsx)(n.p,{children:"To effectly understand the next section, you need a basic understanding of:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/aoh-docs/docs/overview/technologies/svelte_sveltekit",children:"Svelte & Svelte Kit"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/aoh-docs/docs/overview/technologies/svelte_sveltekit",children:"Graph QL"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/aoh-docs/docs/overview/technologies/svelte_sveltekit",children:"urql"})}),"\n"]})]}),"\n",(0,s.jsxs)(n.p,{children:["Here is an example Svelte ",(0,s.jsx)(n.a,{href:"https://kit.svelte.dev/docs/routing#page-page-js",children:(0,s.jsx)(n.em,{children:"page"})})," with a ",(0,s.jsx)(n.code,{children:"Svelte Kit"}),"\nload function that makes a GraphQL query and passes the result as props to the page component:"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"WidgetConfigQuery"})," type and ",(0,s.jsx)(n.code,{children:"WidgetConfigDocument"})," exports are generated using ",(0,s.jsx)(n.code,{children:"graphql-codegen"}),", which will be\nelaborated on in the next section."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="+page.ts"',children:'import { gqlClient } from "$lib/stores/Clients";\nimport { get } from "svelte/store";\nimport {\n    type WidgetConfigQuery,\n    WidgetConfigDocument,\n} from "./index.generated";\n\ngql`\n    query WidgetConfig {\n        configuration_widget {\n            config\n            name\n            type\n            uuid\n        }\n    }\n`;\n\nexport async function load({}) {\n    const client = get(gqlClient);\n    const response = await client\n        .query<WidgetConfigQuery>(WidgetConfigDocument)\n        .toPromise();\n\n    return {\n        props: {\n            configuration_widget: response.data?.configuration_widget,\n        },\n    };\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",metastring:'title="+page.svelte"',children:'<script lang="ts">... export let configuration_widget = {}; ...<\/script>\n'})}),"\n",(0,s.jsx)(n.h3,{id:"making-a-graphql-subscriptions",children:"Making a GraphQL Subscriptions"}),"\n",(0,s.jsxs)(n.p,{children:["Urql performs GraphQL subscriptions using ",(0,s.jsx)(n.a,{href:"https://github.com/0no-co/wonka#wonka",children:"Wonka"}),", a stream library. To handle\ndata received from Urql subscriptions, they must be piped into a ",(0,s.jsx)(n.code,{children:"Wonka Subscribe"})," function and handled with a callback\nfunction."]}),"\n",(0,s.jsx)(n.p,{children:"The following is a simple example of setting up a subscription using our framework. See the comments for more details."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",metastring:'title="+page.svelte"',children:"<script lang=\"ts\">\n    import { SystemTimeDocument, type SystemTimeSubscription } from '$generated-types';\n\n    import { get } from 'svelte/store';\n    import { type Subscription, pipe as wPipe, subscribe as wSubscribe } from 'wonka';\n\n    import { gqlClientStore } from '$lib/stores/Clients';\n    import gql from 'graphql-tag';\n    import { onDestroy, onMount } from 'svelte';\n\n    let dateTime: ISO8601Date;\n    let subscription: Subscription;\n\n    onMount(async () => {\n        // highlight-start\n        // Get the GraphQL Client from the client store.\n        // highlight-end\n        const client = get(gqlClientStore);\n\n        // highlight-start\n        // Define the GraphQL subscription - this can be done in the same file, in a separate `.graphql` file, or\n        // anywhere else - as long as it exists, graphql-codegen will pick it up and generate the subscription type and\n        // object for use. Remember to run GraphQL Codegen!\n        // highlight-end\n        gql`\n            subscription SystemTime {\n                system_time {\n                    reported_at\n                }\n            }\n        `;\n\n        // highlight-start\n        // Store the subscription so we can call unsubscribe later.\n        // highlight-end\n        subscription = wPipe(\n            client.subscription<SystemTimeSubscription>(SystemTimeDocument, {}),\n            wSubscribe(result => {\n                if (result?.data && result?.data?.system_time[0]) {\n                    dateTime = result.data.system_time[0].reported_at;\n                    console.log(\"Lets see the time!\", dateTime);\n                }\n            })\n        );\n    });\n\n    onDestroy(async () => {\n\n        // highlight-start\n        // Ensure you unsubscribe at the appropriate time. For example, when the component unmounts.\n        // If you skip this step, your subscription will persist as your change pages (with client-side navigation)\n        // highlight-end\n        if (subscription) subscription.unsubscribe();\n    });\n<\/script>\n"})}),"\n",(0,s.jsx)(n.h3,{id:"query-types--graphql-codegen",children:"Query Types & GraphQL Codegen"}),"\n",(0,s.jsxs)(n.p,{children:["We use ",(0,s.jsx)(n.code,{children:"graphql-codegen"})," to generate the query shape/types from the the ",(0,s.jsx)(n.code,{children:"schema.graphql"})," file. You can get the schema\nfile by using the introspection API from the GraphQL endpoint you are calling."]}),"\n",(0,s.jsxs)(n.p,{children:["In ",(0,s.jsx)(n.code,{children:"aoh-web"}),", we have an npm script called ",(0,s.jsx)(n.code,{children:"getschema"})," which runs ",(0,s.jsx)(n.code,{children:"gq"})," to get the ",(0,s.jsx)(n.code,{children:"schema.graphql"})," file and places It\nin the root directory. Learn how to use ",(0,s.jsx)(n.code,{children:"gq"})," to pull the schema here:\n",(0,s.jsx)(n.a,{href:"https://hasura.io/docs/latest/guides/export-graphql-schema/",children:"https://hasura.io/docs/latest/guides/export-graphql-schema/"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm run getschema\n"})}),"\n",(0,s.jsxs)(n.p,{children:["We then have another npm script called ",(0,s.jsx)(n.code,{children:"generate"})," which runs graphql-codegen. It reads the ",(0,s.jsx)(n.code,{children:"codegen.yml"})," configuration\nfile to determine how where to get ",(0,s.jsx)(n.code,{children:"schema.graphql"})," (we place it in the root folder), along with all other files that\nstore your queries and uses these files to generate the types. They appear in a folder called ",(0,s.jsx)(n.code,{children:"generated"}),"\nwhich is excluded from .git."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm run generate\n"})}),"\n",(0,s.jsxs)(n.p,{children:["After generating these types, you can now have full typescript definitions for your GraphQL queries. Remember to run\n",(0,s.jsx)(n.code,{children:"npm run getschema"})," again whenever your GraphQL schema changes, and to run ",(0,s.jsx)(n.code,{children:"npm run generate"})," whenever you write new\nqueries, or need to update the queries with the new schema."]}),"\n",(0,s.jsx)(n.h2,{id:"handling-authentication",children:"Handling Authentication"}),"\n",(0,s.jsx)(n.h3,{id:"jwt-access-token",children:"JWT Access Token"}),"\n",(0,s.jsxs)(n.p,{children:["Authentication of requests is done via the ",(0,s.jsx)(n.code,{children:"jwt"}),". The ",(0,s.jsx)(n.code,{children:"urql"})," client has been set up to use the JWT acquired from logging\nin to the system. It also automatically handles token refreshes and query retries. On the server-side client, the token\nis attached to the request header as a Bearer Authorization token. On the client side, it is sent to ",(0,s.jsx)(n.code,{children:"Hasura"}),"\nautomatically via cookies. This usage of cookies on the client-side is an additional security measure to avoid exposing\nthe token to access via JavaScript. This means you will not able to access the access token on the client/browser in\nJavaScript."]}),"\n",(0,s.jsx)(n.p,{children:"To accomodate this, we have multiple instances of Hasura set up, each set to handle different modes of authentication."}),"\n",(0,s.jsx)(n.h3,{id:"broken-queries-subscriptions-and-retries",children:"Broken Queries, Subscriptions, and Retries"}),"\n",(0,s.jsx)(n.p,{children:"There are 2 layers of retries that have been set up:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"urql"})," client has been set up to handle retries via the ",(0,s.jsx)(n.code,{children:"retryExchange"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"graphql-ws"})," client has been set up to handle broken WebSocket connections with retries"]}),"\n",(0,s.jsx)(n.li,{children:"They are both configured to exponentially backoff retries on failure."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"urql"})," client is set up to retry only subscriptions, as it is assumed that when you make a subscription, you want\nthis connection to be open and receiving data indefinitely. Queries are not retried, but you may configure this\nbehaviour by modifying ",(0,s.jsx)(n.code,{children:"Clients.ts"})," in ",(0,s.jsx)(n.code,{children:"src/lib/stores/Clients.ts"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Subscriptions use the ",(0,s.jsx)(n.code,{children:"graphql-ws"})," transport, this creates and manages a websocket connection, which ",(0,s.jsx)(n.code,{children:"urql"})," then uses.\nThe JWT is passed to Hasura when the subscription is first created and the websocket connection gets opened. Hasura then\nuses the expiry time in the token to decide when to terminate the GraphQL connection. This closing of the connection\ncauses all subscriptions to fail - then will then all be automatically retried with the new access token."]}),"\n",(0,s.jsxs)(n.p,{children:["In some cases, you might have passed a variable into your subscription that might need to be updated when a retry\noccurs. This is particularly necessary when you use Hasura's streaming subscriptions, which requires a cursor to\ndetermine where to start pulling data from. Your subscription would be retried with the original cursor value, causing\nyour application to retrieve duplicate data. To deal with this, you must pass a context object with the properties\n",(0,s.jsx)(n.code,{children:"onConnectionClosed"})," and ",(0,s.jsx)(n.code,{children:"onConnectionConnected"})," to your GraphQL subscriptions. These must contain a callback\nfunction that takes in an operation as an argument and returns nothing. An event listener will call these functions when\nthe GraphQL WebSocket connection closes and connects respectively, allowing you to reset subscriptions as needed."]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",metastring:'title="Streaming Subscriptions with Timestamp Cursor Example" {23-42}',children:'onMount(async () => {\n    const client = get(gqlClientStore);\n\n    gql`\n        subscription ExampleStreaming($createdAt: timestampz) {\n            some_data_stream {\n                id\n            }\n        }\n    `;\n\n    let streamingSubscription: Subscription;\n\n    function createExampleStreamingSubscription() {\n        return wPipe(\n            client.subscription<ExampleStreamingSubscription>(\n                ExampleStreamingDocument,\n                {\n                    created_at:\n                        dayjs($systemTime).toISOString() ??\n                        dayjs().toISOString(),\n                },\n                {\n                    // Pass in the callback function to update the operation variables on connection loss.\n                    onConnectionClosed: (operation: Operation) => {\n                        operation.variables = {\n                            created_at:\n                                dayjs($systemTime).toISOString() ??\n                                dayjs().toISOString(),\n                        };\n\n                        // cleanup\n                        streamingSubscription.unsubscribe();\n                    },\n                    onConnectionConnected: (operation: Operation) => {\n                        // Only create subscriptions if they don\'t exist (or will be double-added in this callback)\n                        if (!streamingSubscription) {\n                            streamingSubscription =\n                                createExampleStreamingSubscription();\n                        }\n                    },\n                }\n            ),\n            wSubscribe((result) => {\n                if (result?.data && result?.data?.some_data_stream[0]) {\n                    logger.debug(\n                        { id: result.data.some_data_stream[0].id },\n                        "How? Is this what you want?"\n                    );\n                }\n            })\n        );\n    }\n\n    streamingSubscription = createExampleStreamingSubscription();\n});\n'})}),"\n",(0,s.jsx)(n.h2,{id:"managing-state",children:"Managing State"}),"\n",(0,s.jsxs)(n.p,{children:["A key point to take note about using Svelte Stores with Svlete Kit is that whenever stores are run on the server, it is\nglobal - meaning when running hybrid rendering or server-side rendering (any code in ",(0,s.jsx)(n.code,{children:".svelte"})," that has no\n",(0,s.jsx)(n.code,{children:"if (browser)"})," checks or isn't run inside ",(0,s.jsx)(n.code,{children:"onMount()"}),"). This means you should always set stores in a browser context\nonly."]}),"\n",(0,s.jsxs)(n.p,{children:["Reference issue: ",(0,s.jsx)(n.a,{href:"https://github.com/sveltejs/kit/discussions/4339",children:"https://github.com/sveltejs/kit/discussions/4339"})]}),"\n",(0,s.jsx)(n.h2,{id:"fontawesome",children:"FontAwesome"}),"\n",(0,s.jsx)(n.p,{children:"We are using the SVG+JS for extra features. combining this with SVG Sprites can allow us to save a lot of space. However,\nfor maintainbility reasons, we are currently using the full set of icons (15MB)."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://fontawesome.com/v6/docs/apis/javascript/tree-shaking",children:"https://fontawesome.com/v6/docs/apis/javascript/tree-shaking"})}),"\n",(0,s.jsx)(n.p,{children:"Using tree-shaking, we can get rid of all the unused icons - this configuration will be handled in the future."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://fontawesome.com/docs/web/dig-deeper/webfont-vs-svg#side-by-side-comparison",children:"https://fontawesome.com/docs/web/dig-deeper/webfont-vs-svg#side-by-side-comparison"})}),"\n",(0,s.jsx)(n.p,{children:"If many instances of the same icon is needed - use SVG Sprites for better performance.\nIf many different icons are needed - load everything and use the Web Fonts + CSS method."}),"\n",(0,s.jsxs)(n.p,{children:["The SVG + JS method of using Font Awesome is all contained in a js file (all.js). This can be massively optimized by\nchoosing only the styles that you need. ",(0,s.jsx)(n.a,{href:"https://fontawesome.com/docs/web/setup/host-yourself/svg-js",children:"FontAwesome SVG+JS"})]}),"\n",(0,s.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,s.jsx)(n.p,{children:"Successful development involves testing. It is a big topic on its own, so please visit the respective pages to\nlearn how we handle testing."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/aoh-docs/docs/modules/web/guides/testing/TDD-Testing",children:"Test Driven Development Testing (TDD)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/aoh-docs/docs/modules/web/guides/testing/BDD-Testing",children:"Behaviour Driven Development Testing (BDD)"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"We are expected to write out own unit tests and participate in integration tests."}),"\n",(0,s.jsx)(n.h2,{id:"creating-endpoints",children:"Creating Endpoints"}),"\n",(0,s.jsxs)(n.p,{children:["All API endpoints created by the web server should be done at the ",(0,s.jsx)(n.code,{children:"src/routes/api"})," folder. This is done by Creating\n",(0,s.jsx)(n.code,{children:"+server.ts"})," files in the respective folder. For example, for the api to get the system time, the ",(0,s.jsx)(n.code,{children:"+server.ts"})," file is\nin ",(0,s.jsx)(n.code,{children:"src/routes/api/info/time/+server.ts"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["See ",(0,s.jsx)(n.a,{href:"https://kit.svelte.dev/docs/routing#server",children:"https://kit.svelte.dev/docs/routing#server"})," for more information;"]}),"\n",(0,s.jsx)(n.h3,{id:"standard-endpoint-message-format",children:"Standard endpoint message format"}),"\n",(0,s.jsxs)(n.p,{children:["As a standard for our system, we are adopting the following structure for the response payload for endpoints. This type\nis defined in the ",(0,s.jsx)(n.code,{children:"app.d.ts"})," as ",(0,s.jsx)(n.code,{children:"HTTPResponseBody"})," and should be used to type all your API responses."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'{\n    data: {...}, // arbitrary format - always array? GraphQL does array or obj - to be decided\n    message: "...", // string\n    sent_at: "", //iso8601\n    errors: [ {\n        message: "....", // string\n        ...\n    } ]\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},7227:(e,n,t)=>{t.r(n),t.d(n,{default:()=>o});t(96540);var s=t(18215);const i={tabItem:"tabItem_Ymn6"};var r=t(74848);function o(e){let{children:n,hidden:t,className:o}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,s.A)(i.tabItem,o),hidden:t,children:n})}},45645:(e,n,t)=>{t.d(n,{A:()=>p});var s=t(96540),i=t(18215),r=t(24245),o=t(8626),a=t(11062);const l={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var c=t(74848);function d(e){let{className:n,block:t,selectedValue:s,selectValue:o,tabValues:a}=e;const d=[],{blockElementScrollPositionUntilNextRender:h}=(0,r.a_)(),u=e=>{const n=e.currentTarget,t=d.indexOf(n),i=a[t].value;i!==s&&(h(n),o(i))},p=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=d.indexOf(e.currentTarget)+1;n=d[t]??d[0];break}case"ArrowLeft":{const t=d.indexOf(e.currentTarget)-1;n=d[t]??d[d.length-1];break}}n?.focus()};return(0,c.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":t},n),children:a.map((e=>{let{value:n,label:t,attributes:r}=e;return(0,c.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>d.push(e),onKeyDown:p,onClick:u,...r,className:(0,i.A)("tabs__item",l.tabItem,r?.className,{"tabs__item--active":s===n}),children:t??n},n)}))})}function h(e){let{lazy:n,children:t,selectedValue:i}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===i));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return(0,c.jsx)("div",{className:"margin-top--md",children:r.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function u(e){const n=(0,o.u)(e);return(0,c.jsxs)("div",{className:(0,i.A)("tabs-container",l.tabList),children:[(0,c.jsx)(d,{...n,...e}),(0,c.jsx)(h,{...n,...e})]})}function p(e){const n=(0,a.default)();return(0,c.jsx)(u,{...e,children:(0,o.v)(e.children)},String(n))}},8626:(e,n,t)=>{t.d(n,{u:()=>p,v:()=>c});var s=t(96540),i=t(56347),r=t(36494),o=t(62814),a=t(45167),l=t(69900);function c(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:n,children:t}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return c(e).map((e=>{let{props:{value:n,label:t,attributes:s,default:i}}=e;return{value:n,label:t,attributes:s,default:i}}))}(t);return function(e){const n=(0,a.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function u(e){let{queryString:n=!1,groupId:t}=e;const r=(0,i.W6)(),a=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o.aZ)(a),(0,s.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(r.location.search);n.set(a,e),r.replace({...r.location,search:n.toString()})}),[a,r])]}function p(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,o=d(e),[a,c]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=t.find((e=>e.default))??t[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:o}))),[p,m]=u({queryString:t,groupId:i}),[g,x]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,r]=(0,l.Dv)(t);return[i,(0,s.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:i}),f=(()=>{const e=p??g;return h({value:e,tabValues:o})?e:null})();(0,r.A)((()=>{f&&c(f)}),[f]);return{selectedValue:a,selectValue:(0,s.useCallback)((e=>{if(!h({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);c(e),m(e),x(e)}),[m,x,o]),tabValues:o}}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(96540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);