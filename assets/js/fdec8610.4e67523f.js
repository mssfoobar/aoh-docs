"use strict";(self.webpackChunkaoh_documentation=self.webpackChunkaoh_documentation||[]).push([[5864],{7673:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>m,toc:()=>r});var t=o(74848),s=o(28453);const i={sidebar_position:20},a="Conventional Commits",m={id:"development/source_management/conventional-commits",title:"Conventional Commits",description:"Conventional commits is a specification for adding human and machine readable meaning to commit messages.",source:"@site/docs/20_development/50_source_management/20-conventional-commits.md",sourceDirName:"20_development/50_source_management",slug:"/development/source_management/conventional-commits",permalink:"/aoh-docs/docs/development/source_management/conventional-commits",draft:!1,unlisted:!1,editUrl:"https://github.com/mssfoobar/aoh-docs/tree/main/docs/20_development/50_source_management/20-conventional-commits.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{sidebar_position:20},sidebar:"development",previous:{title:"Version Control System",permalink:"/aoh-docs/docs/development/source_management/version-control-system"},next:{title:"Publishing Web Components",permalink:"/aoh-docs/docs/development/source_management/publishing"}},c={},r=[{value:"Summary",id:"summary",level:2},{value:"Why conventional commits?",id:"why-conventional-commits",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"conventional-commits",children:"Conventional Commits"}),"\n",(0,t.jsx)(n.p,{children:"Conventional commits is a specification for adding human and machine readable meaning to commit messages."}),"\n",(0,t.jsxs)(n.p,{children:["The specification is well documented, read more about conventional commits ",(0,t.jsx)(n.a,{href:"https://www.conventionalcommits.org/",children:"here"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,t.jsxs)(n.p,{children:["The Conventional Commits specification is a lightweight convention on top of commit messages. It provides an easy set\nof rules for creating an explicit commit history; which makes it easier to write automated tools on top of. This\nconvention dovetails with ",(0,t.jsx)(n.a,{href:"https://semver.org/",children:"SemVer"}),", by describing the features, fixes, and breaking changes made in\ncommit messages."]}),"\n",(0,t.jsx)(n.p,{children:"The commit message should be structured as follows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"<type>[optional scope]: <description>\n\n[optional body]\n\n[optional footer(s)]\n"})}),"\n",(0,t.jsx)(n.h2,{id:"why-conventional-commits",children:"Why conventional commits?"}),"\n",(0,t.jsx)(n.p,{children:"Following conventional commits allows many tools to parse and make sense of commits since they follow an agreed upon\nconvention. It also standardizes them in a format that lets the reader make sense of the commit. On our web server, we\nuse husky to apply a pre-commit check to enforce that developers commit with messages that follows conventional commits.\nWe can then use tools to generate release notes based on these commits - but the quality of these notes will directly be\nrelated to the quality of the commit messages and pull requests, so please take this practice seriously!"})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>m});var t=o(96540);const s={},i=t.createContext(s);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function m(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);